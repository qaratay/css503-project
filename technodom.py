# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1miMchQCcRMXhrwMIegxcTzU3jBoDE3Yj
"""

from bs4 import BeautifulSoup
import requests
import pandas as pd

import time

url = 'https://www.technodom.kz/catalog/smartfony-i-gadzhety/smartfony-i-telefony'

import requests
from bs4 import BeautifulSoup
import pandas as pd
import time

def get_data(url, total_pages, items_per_page, product_type):
    all_data = []
    for page_number in range(1, total_pages + 1):
        url_with_page = f"{url}?page={page_number}"
        response = requests.get(url_with_page)
        soup = BeautifulSoup(response.text, "lxml")
        products = soup.find_all("li", class_='ProductList_item__9Jj7j')
        time.sleep(5)

        data = []
        for product in products[:items_per_page]:
            item = {}
            name_element = product.find("p", class_="ProductCardV_title__rFAYr")
            price_element = product.find("p", class_="ProductCardPrices_price__5dlTx")
            oldprice_element = product.find("p", class_="ProductCardPrices_oldPrice__lrAgm")
            delivery_element = product.find("p", class_="ProductCardShippingInfo_date__GJYFs")
            discount_element = product.find("p", class_="StickerNext__Text")

            item["Name"] = name_element.text if name_element else "Name not found"
            item["Type"] = product_type
            item["Price"] = price_element.text if price_element else "Price not found"
            item["Old Price"] = oldprice_element.text if oldprice_element else ""
            item["Delivery"] = delivery_element.text if delivery_element else "Delivery info not found"
            item["Discount"] = discount_element.text if discount_element else "0%"
            data.append(item)

        all_data.extend(data)

    return all_data

def export_data(data):
    df = pd.DataFrame(data)
    df.to_excel("technodom.xlsx")
    df.to_csv("technodom.csv", index=False)  # Avoid writing row indices

if __name__ == '__main__':
    urls = [
        {"url": "https://www.technodom.kz/catalog/smartfony-i-gadzhety/smartfony-i-telefony", "type": "Смартфоны", "pages": 22},
        {"url": "https://www.technodom.kz/catalog/smartfony-i-gadzhety/naushniki", "type": "Наушники", "pages": 21},
        {"url": "https://www.technodom.kz/catalog/smartfony-i-gadzhety/gadzhety", "type": "Гаджеты", "pages": 9},
        {"url": "https://www.technodom.kz/catalog/noutbuki-i-komp-jutery/noutbuki-i-aksessuary/noutbuki", "type": "Ноутбуки", "pages": 8},
        {"url": "https://www.technodom.kz/catalog/noutbuki-i-komp-jutery/komp-jutery-i-monitory/stacionarnye-pk", "type": "Компьютеры", "pages": 1},
        {"url": "https://www.technodom.kz/catalog/smartfony-i-gadzhety/planshety-i-jelektronnye-knigi", "type": "Планшеты", "pages": 7},
        {"url": "https://www.technodom.kz/catalog/tv-audio-foto-video/televizory", "type": "Телевизоры", "pages": 11},
        {"url": "https://www.technodom.kz/catalog/bytovaja-tehnika/hranenie-produktov-i-napitkov", "type": "Холодильники", "pages": 13},
        {"url": "https://www.technodom.kz/catalog/bytovaja-tehnika/hranenie-produktov-i-napitkov", "type": "Стиральные Машины", "pages": 14}


    ]

    items_per_page = 12

    all_data = []
    for url_info in urls:
        data = get_data(url_info["url"], url_info["pages"], items_per_page, url_info["type"])
        all_data.extend(data)

    export_data(all_data)

import pandas as pd
import numpy as np

def clean_and_export_data(file_path):
    df = pd.read_excel(file_path)

    df.replace('Name not found', np.nan, inplace=True)
    df.dropna(subset=['Name'], inplace=True)


    cleaned_file_path = file_path.replace('.xlsx', '_cleaned.xlsx')
    df.to_excel(cleaned_file_path, index=False)
    print(f"Cleaned data exported to {cleaned_file_path}")

if __name__ == '__main__':
    file_path = 'technodom.xlsx'
    clean_and_export_data(file_path)

import pandas as pd
import numpy as np

def clean_data(file_path):
    df = pd.read_excel(file_path)

    df['Price'] = pd.to_numeric(df['Price'], errors='coerce')


    return df

def export_cleaned_data(df, file_path):
    df.to_excel(file_path.replace('.xlsx', '_cleaned.xlsx'), index=False)
    df.to_csv(file_path.replace('.xlsx', '_cleaned.csv'), index=False)

if __name__ == '__main__':
    file_path = 'technodom_cleaned.xlsx'
    cleaned_data = clean_data(file_path)
    export_cleaned_data(cleaned_data, file_path)

# Loading the DataFrame and applying the extract_brand function
known_brands = ["Samsung", "LG", "Motorola", "Apple", "JBL", "ONYX", "Neo", "HyperX", "Dauscher", "Logitech", "Beko", "Xiaomi", "OPPO", "Honor", "Vivo", "Redmi"]
df = pd.read_excel("technodom_cleaned.xlsx")

def extract_brand(name):
    for brand in known_brands:
        if brand.lower() in name.lower():
            return brand
    return "Unknown"

df['Brand'] = df['Name'].apply(extract_brand)

df.to_excel("technodom_with_brands.xlsx", index=False)

df.head()

import pandas as pd
import numpy as np

df = pd.read_excel("technodom_with_brands.xlsx")


df['Price'] = df['Price'].replace(r'\D', '', regex=True).astype(float)
df['Discount'] = df['Discount'].str.replace('%', '').astype(float)

brand_aggregation = df.groupby('Brand').agg(
    Average_Price=('Price', 'mean'),
    Total_Products=('Name', 'count'),
    Average_Discount=('Discount', 'mean')
)


type_aggregation = df.groupby('Type').agg(
    Average_Price=('Price', 'mean'),
    Total_Products=('Name', 'count')
)

combined_aggregation = df.groupby(['Brand', 'Type']).agg(
    Average_Price=('Price', 'mean'),
    Total_Products=('Name', 'count')
)

print("Brand Aggregation:\n", brand_aggregation.head())
print("\nType Aggregation:\n", type_aggregation.head())
print("\nCombined Brand and Type Aggregation:\n", combined_aggregation.head())

df_filtered = df[df['Brand'] != 'Unknown']

plt.figure(figsize=(10, 6))
sns.countplot(x='Brand', data=df_filtered)
plt.xticks(rotation=45)
plt.title('Product Count by Brand (Excluding Unknown)')
plt.ylabel('Count')
plt.xlabel('Brand')
plt.show()

# Filtering the DataFrame for 'Смартфоны' type and excluding 'Unknown' brand
df_smartphones = df[(df['Type'] == 'Смартфоны') & (df['Brand'] != 'Unknown')]

plt.figure(figsize=(10, 6))
sns.countplot(x='Brand', data=df_smartphones)
plt.xticks(rotation=45)
plt.title('Product Count by Brand for Смартфоны (Excluding Unknown)')
plt.ylabel('Count')
plt.xlabel('Brand')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_excel('technodom_with_brands.xlsx')

df['Price'] = df['Price'].replace(r'\D', '', regex=True).astype(float)
df['Discount'] = df['Discount'].str.replace('%', '').astype(float)


plt.figure(figsize=(10, 6))
sns.barplot(x='Brand', y='Price', data=df, estimator=np.mean)
plt.xticks(rotation=45)
plt.title('Average Price by Brand')
plt.ylabel('Average Price')
plt.xlabel('Brand')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x='Brand', y='Price', data=df)
plt.xticks(rotation=45)
plt.title('Price Distribution by Brand')
plt.ylabel('Price')
plt.xlabel('Brand')
plt.show()

plt.figure(figsize=(14, 8))
sns.boxplot(x='Type', y='Price', hue='Brand', data=df)
plt.xticks(rotation=45)
plt.title('Price Distribution by Type and Brand')
plt.ylabel('Price')
plt.xlabel('Type')
plt.legend(title='Brand', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(df['Discount'], kde=True)
plt.title('Distribution of Discounts')
plt.xlabel('Discount (%)')
plt.ylabel('Frequency')
plt.show()

df_filtered = df[df['Brand'] != 'Unknown']

plt.figure(figsize=(10, 6))
sns.barplot(x='Brand', y='Discount', data=df, estimator=np.mean)
plt.xticks(rotation=45)
plt.title('Average Discount by Brand')
plt.ylabel('Average Discount (%)')
plt.xlabel('Brand')
plt.show()